<Window x:Class="GletredWpfEditor.Main.MainTabWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:GletredWpfEditor.Main"
        mc:Ignorable="d"
         xmlns:main="clr-namespace:GletredWpfEditor.Main"
        xmlns:command="clr-namespace:GletredWpfEditor.Commands"
        xmlns:converters="clr-namespace:GletredWpfEditor.Converters"
        xmlns:system="clr-namespace:System;assembly=System.Runtime"
        xmlns:service="clr-namespace:GletredWpfEditor"
        xmlns:windowmodule="clr-namespace:GletredEdShare.WindowModule"
        xmlns:assetBrowser="clr-namespace:GletredWpfEditor.AssetBrowser"
        xmlns:logViewer="clr-namespace:GletredWpfEditor.LogViewer"
        xmlns:viewport="clr-namespace:GletredWpfEditor.Preview"
        Title="{Binding Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
        Height="{Binding Height, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
        Width="{Binding Width, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
        Background="{DynamicResource DarkSurfaceColor00dpBrush}" 
        WindowState="{Binding State,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" 
        MinWidth="{Binding MinWidth, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
        MinHeight="{Binding MinHeight, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
        Closing="Window_Closing"
        SizeChanged="Window_SizeChanged">

    <Window.DataContext>
        <main:MainWindowViewModel/>
    </Window.DataContext>

    <Window.InputBindings>
        <KeyBinding Command="{x:Static command:EditorCommand.OpenProjectWizardWindowCommand}" Gesture="Ctrl+Shift+N" />
        <KeyBinding Command="{x:Static command:EditorCommand.OpenProjectCommand}" Gesture="Ctrl+Shift+O" />
    </Window.InputBindings>


    <Window.Resources>
        <converters:ActiveContentConverter x:Key="ActiveContentConverter"/>
        <BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:StringToFluentIconUriConverter x:Key="StringToFluentIconUriConverter"/>
        <system:Boolean x:Key="True">True</system:Boolean>
        <system:Boolean x:Key="False">False</system:Boolean>
    </Window.Resources>

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="{x:Static SystemParameters.CaptionHeight}"
                      ResizeBorderThickness="{x:Static SystemParameters.WindowResizeBorderThickness}"
        />
    </WindowChrome.WindowChrome>

    <Grid Background="{DynamicResource DarkSurfaceColor00dpBrush}">
        <Image Margin="0,-1,0,0" Source="{Binding IconUri, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Height="25" HorizontalAlignment="Left" Width="25" VerticalAlignment="Top"/>
        <StackPanel x:Name="TopStackPanel" Height="22" VerticalAlignment="Top" WindowChrome.IsHitTestVisibleInChrome ="False"  MouseLeftButtonDown="TopStackPanel_MouseLeftButtonDown" MouseMove="TopStackPanel_MouseMove" Orientation="Horizontal" Margin="384,0,141,0" FlowDirection="RightToLeft" Background="{DynamicResource DarkSurfaceColor00dpBrush}">
            <Label Content="{Binding Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" FontFamily="Yu Gothic UI Semibold" Foreground="{DynamicResource DarkMediumEmphasisTextColorBrush}" Background="{DynamicResource DarkSurfaceColor01dpBrush}" Height="24" FlowDirection="LeftToRight" Margin="50,0,0,0"/>
        </StackPanel>
        <Button x:Name="MinimizationButton" HorizontalAlignment="Right" WindowChrome.IsHitTestVisibleInChrome ="True"
                Margin="0,0,94,0" ToolTip="Minimization" VerticalAlignment="Top" Width="47" Height="25" 
                Click="MinimizationButton_Click"  d:LayoutOverrides="LeftMargin, RightMargin, TopMargin, BottomMargin"
                Background="{DynamicResource DarkSurfaceColor00dpBrush}"
                Opacity="{DynamicResource DarkImageOpacity}" BorderBrush="{x:Null}">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonWithImageStyle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDialogMode}" Value="True">
                            <!--if you disable visibility of tooltip, the button mouse judgment will also disappear, so use that.-->
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsDialogMode}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <Image Source="{Binding MinimizeImageUri, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                <Image.Style>
                    <Style>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsDialogMode}" Value="True">
                                <Setter Property="UIElement.Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Button>
        <Button x:Name="MaximizeButton" HorizontalAlignment="Right" WindowChrome.IsHitTestVisibleInChrome ="True" Margin="0,0,47,0" VerticalAlignment="Top" Width="47" Height="25" d:LayoutOverrides="LeftMargin, RightMargin, TopMargin, BottomMargin" BorderBrush="{DynamicResource DarkSurfaceColor00dpBrush}" Background="{DynamicResource DarkSurfaceColor00dpBrush}"
                 Click="MaximizeButton_Click" Opacity="{DynamicResource DarkImageOpacity}">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CustomButtonWithImageStyle}">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsDialogMode}" Value="True">
                            <!--if you disable visibility of tooltip, the button mouse judgment will also disappear, so use that.-->
                            <Setter Property="Visibility" Value="Hidden"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsDialogMode}" Value="False">
                            <Setter Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <Image>
                <Image.Style>
                    <Style>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding IsDialogMode}" Value="True">
                                <Setter Property="UIElement.Visibility" Value="Hidden"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsMaximize}" Value="True">
                                <Setter Property="Image.Source" Value="{Binding RestoreImageUri, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter Property="FrameworkElement.ToolTip" Value="Restore"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsMaximize}" Value="False">
                                <Setter Property="Image.Source" Value="{Binding MaximizeImageUri, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter Property="FrameworkElement.ToolTip" Value="Maximize"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
        </Button>
        <Button x:Name="CloseButton" HorizontalAlignment="Right" Style="{StaticResource CustomButtonWithImageStyle}"  WindowChrome.IsHitTestVisibleInChrome ="True" VerticalAlignment="Top" Width="47" Height="25" ToolTip="Close" Click="CloseButton_Click"  d:LayoutOverrides="LeftMargin, RightMargin, TopMargin, BottomMargin" Background="{DynamicResource DarkSurfaceColor00dpBrush}" BorderBrush="{DynamicResource DarkSurfaceColor00dpBrush}" Opacity="{DynamicResource DarkImageOpacity}">
            <Image Source="{Binding CloseImageUri, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        </Button>

        <Menu WindowChrome.IsHitTestVisibleInChrome="True" Background="{DynamicResource DarkSurfaceColor00dpBrush}"  Margin="26,0,416,0" Height="22" VerticalAlignment="Top">
            <MenuItem Style="{DynamicResource CustomMenuItemStyle}" Header="{Binding Resources.File, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22">
                <MenuItem Header="{Binding Resources.NewProject, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" 
                          InputGestureText="Ctrl+Shift+N" Command="{x:Static command:EditorCommand.OpenProjectWizardWindowCommand}"/>
                <MenuItem Header="{Binding Resources.OpenProject, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" 
                          InputGestureText="Ctrl+Shift+O" Command="{x:Static command:EditorCommand.OpenProjectCommand}"/>
            </MenuItem>
            <MenuItem Style="{DynamicResource CustomMenuItemStyle}" Header="{Binding Resources.Edit, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22">
                <MenuItem Header="MenuItem"/>
            </MenuItem>
            <MenuItem Style="{DynamicResource CustomMenuItemStyle}" Header="{Binding Resources.View, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22">
                <MenuItem Header="{Binding Resources.AssetBrowser, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22" IsCheckable="True" IsChecked="{Binding EnableAssetBrowser,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                <MenuItem Header="{Binding Resources.LogViewer, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22" IsCheckable="True" IsChecked="{Binding EnableLogViewer,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
                <MenuItem Header="{Binding Resources.Preview, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22" IsCheckable="True" IsChecked="{Binding EnablePreview,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}"/>
            </MenuItem>
            <MenuItem Style="{DynamicResource CustomMenuItemStyle}" Header="{Binding Resources.Game, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22">
                <MenuItem Header="MenuItem"/>
            </MenuItem>
            <MenuItem Style="{DynamicResource CustomMenuItemStyle}" Header="{Binding Resources.Window, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22">
                <MenuItem Header="MenuItem"/>
            </MenuItem>
            <MenuItem Style="{DynamicResource CustomMenuItemStyle}" Header="{Binding Resources.Help, Mode=OneWay, Source={x:Static service:ResourceService.Current}, UpdateSourceTrigger=PropertyChanged}" Height="22">
                <MenuItem Header="MenuItem"/>
            </MenuItem>
        </Menu>


        <Grid Background="{DynamicResource DarkSurfaceColor00dpBrush}" Margin="0,22,0,0">
            <TabControl Style="{StaticResource CustomTabControlStyle}" ItemsSource="{Binding DockingWindows,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Foreground="{DynamicResource DarkMediumEmphasisTextColorBrush}"
                         SelectedIndex="{Binding SelectTabIndex,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}">

                <TabControl.ItemContainerStyle>
                    <Style TargetType="{x:Type TabItem}" BasedOn="{StaticResource CustomTabItemStyle}">
                        <Setter Property="Height" Value="27" />
                    </Style>
                </TabControl.ItemContainerStyle>

                <TabControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Name,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}" Foreground="{DynamicResource DarkMediumEmphasisTextColorBrush}"/>
                    </DataTemplate>
                </TabControl.ItemTemplate>

                <TabControl.ContentTemplate>
                    <DataTemplate>
                        <ContentControl Content="{Binding OwnerControl.Control,Mode=OneWay,UpdateSourceTrigger=PropertyChanged}"/>
                    </DataTemplate>
                </TabControl.ContentTemplate>
            </TabControl>
        </Grid>
    </Grid>
</Window>